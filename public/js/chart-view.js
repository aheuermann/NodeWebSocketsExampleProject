// Generated by CoffeeScript 1.4.0
(function() {
  var BarChart, BubbleChart, Chart,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.ChartView = (function() {

    ChartView.prototype.width = 800;

    ChartView.prototype.height = 500;

    ChartView.prototype.data = [];

    ChartView.prototype.charts = [];

    ChartView.prototype.currIndex = 0;

    function ChartView(selector) {
      var container;
      container = d3.select(selector);
      this.el = container.append("svg");
      this.el.attr('width', this.width);
      this.charts.push(new BarChart(this.el, this.width, this.height, []));
      this.charts.push(new BubbleChart(this.el, this.width, this.height, []));
      return;
    }

    ChartView.prototype.update = function(data) {
      this.data = data;
      this.charts[this.currIndex].setData(this.data).draw();
    };

    ChartView.prototype.toggleType = function(index) {
      var oldIndex,
        _this = this;
      oldIndex = this.currIndex;
      this.currIndex = index;
      return this.charts[oldIndex].collapse(function() {
        return _this.charts[_this.currIndex].setData(_this.data).draw();
      });
    };

    return ChartView;

  })();

  Chart = (function() {

    Chart.total = 0;

    function Chart(el, width, height, data) {
      this.el = el;
      this.width = width;
      this.height = height;
      this.data = data;
    }

    Chart.prototype.setData = function(data) {
      var d, i, _ref;
      this.data = data;
      this.total = 0;
      _ref = this.data;
      for (i in _ref) {
        d = _ref[i];
        this.total += d.value;
      }
      return this;
    };

    Chart.prototype.fill = d3.scale.category20c();

    return Chart;

  })();

  BubbleChart = (function(_super) {

    __extends(BubbleChart, _super);

    function BubbleChart() {
      return BubbleChart.__super__.constructor.apply(this, arguments);
    }

    BubbleChart.prototype.draw = function() {
      var bubble, bubbleData, node,
        _this = this;
      bubble = d3.layout.pack().sort(null).size([this.width, this.height]).padding(1.5);
      bubbleData = bubble.nodes({
        "children": this.data
      }).filter(function(d) {
        return !d.children;
      });
      this.el.selectAll("g").data(bubbleData).enter().append("g");
      node = this.el.selectAll("g");
      node.transition().duration(500).attr("transform", function(d, i) {
        return "translate(" + d.x + "," + d.y + ")";
      }).each("end", function(d, i) {
        if (i === 0) {
          node.append("circle").style("fill", function(d) {
            return _this.fill(d.letter);
          });
          node.selectAll("circle").transition().duration(1000).attr("r", function(d) {
            return d.r;
          });
          return node.append("text").attr("text-anchor", "middle").text(function(d) {
            return d.letter;
          }).attr("dy", ".3em");
        }
      });
    };

    BubbleChart.prototype.collapse = function(callback) {
      var _this = this;
      this.el.selectAll("text").remove();
      return this.el.selectAll("circle").transition().duration(1000).attr("r", function(d) {
        return 0;
      }).each("end", function(d, i) {
        if (i === 0) {
          _this.el.selectAll('*').remove();
          return callback();
        }
      });
    };

    return BubbleChart;

  })(Chart);

  BarChart = (function(_super) {

    __extends(BarChart, _super);

    function BarChart() {
      this.collapse = __bind(this.collapse, this);
      return BarChart.__super__.constructor.apply(this, arguments);
    }

    BarChart.prototype.setData = function(data) {
      this.data = data;
      BarChart.__super__.setData.apply(this, arguments);
      this.coef = this.width / this.total;
      return this;
    };

    BarChart.prototype.draw = function() {
      var bars, text,
        _this = this;
      bars = this.el.selectAll("rect").data(this.data).enter().append("rect");
      this.el.selectAll("rect").attr("x", 15).attr("y", function(d, i) {
        return i * 23;
      }).attr("height", 20).style("fill", function(d) {
        return _this.fill(d.letter);
      }).transition().duration(1000).attr("width", function(d, i) {
        return Math.floor(d.value * _this.coef);
      });
      text = this.el.selectAll('text').data(this.data).enter().append('text');
      this.el.selectAll('text').attr("x", function(d, i) {
        return 0;
      }).attr("y", function(d, i) {
        return i * 23 + 15;
      }).attr("width", function(d, i) {
        return 20;
      }).text(function(d) {
        return d.letter;
      });
    };

    BarChart.prototype.collapse = function(callback) {
      var _this = this;
      this.el.selectAll("text").remove();
      return this.el.selectAll("rect").transition().duration(1000).attr("width", function(d, i) {
        return 0;
      }).each("end", function(d, i) {
        if (i === 0) {
          _this.el.selectAll('*').remove();
          return callback();
        }
      });
    };

    return BarChart;

  })(Chart);

}).call(this);
